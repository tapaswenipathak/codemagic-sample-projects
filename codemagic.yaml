workflows:
    ios-automatic-code-signing:
      name: iOS automatic code signing
      working_directory: ios/ios-automatic-code-signing-demo-project
      environment:
        vars:
          XCODE_WORKSPACE: "swiftly.xcworkspace"
          XCODE_SCHEME: "swiftly"
          BUNDLE_ID: "io.codemagic.cmswiftly"
          # https://docs.codemagic.io/code-signing-yaml/signing-ios/
          APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
          APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
          APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)
          CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1TUpCQWM0aEtWTHYwSFdHb0lyTFhlajcxZkV5VkhQWWpkVjFnNG1NVGI4YVFfWEdyd1F6YW1LWjIzeENkVWxjNlhRSnQ5OWNqNmdqNm84d3FmdlhFQUNRNmp4Ym1Sckp1enBfUEpKdmJMOURETFFwdFNoVkhuWl9tdGJBNFFyTGw5RXpQMUVjWjBvNFlHUnVSajl6a2RLNWNUN2tUcnlwcUFtUzEzbXpubnJaQVdHODdGWnpTTDVCRlVTTm9feUIybkpyVm14YzRzV29BSV9PNHRoTW1UUUFmbkNtTURIWEVxeHFCTlNDZU5UNzNaaHlJMk8xWFJ4Nlc3cXNwcU1OZmVVdW5SYWpHVVotNkNYVVFYQVZSZ1B1cE9fd05BNzl3TlphZ3VaQjFocy1TTjBXWXQ4NXJubFd0dmFEMnVlODJYYUJrY3RibllNODJsai1BcENlRFM4TmVtNGczM1ZoM1p1UkRNQ1dLZ29IaC1pdlhQN1R0RnlYc2hvT2ZvSzNLakkwYkJKVjJBX0E4R0F6ZGpmQjhMM081U01TU3ZFc0hKZXBRZThzUWRLYks3REowT2JRd1BYeWJCenRaYU5jZU5GNXBXREpRcVBhc3l2V2JOUUw0VWhJb0xCcGM1b3VMdUJzdUhCVnVxNzhFWkFDbE9EREE2YlV5SWdpM1JWYzBmZFUweXFrLWc2Z2ZOenJLLXc0V1hkekZyOVJPSFBPek5nNUdvYjlROWtiNmZ4V1dLQWF5VHdxM0oxS3JZN083YTNfUDFmWmlFcjRreDJjNFBKelEwcTBYVGJraUJWaVRXZ1lJUm8wZWFmN2RMMzNzQTQ3STU2SkM3MVlkRVNQNXZrUmhMN2c2QnEtSzlFVUxISVBCU05Jc1FFNXhGVHp0cmNjTUhDS0FYX3F0S1B5V0pmZGRGRVFEa09ZMGtWY0hHLXBobXl2UDRrYTAzbEhDRkxBN2xpQUs4eWpWekdfQmZwQ2JDbmgzS0JGY0ZlVkgySWIwUHh2c0JzRnFPYm95c256aTBVRmZuYTZaZ19xSDIyX1dmRGZUTmhjTjlGd1BSWlJHbGZsRDNsM00xUkJRTkhUY0xrOG1sQl9Za1AtdjJpMWMxTEJzUTV0eGdwekxtM1hTNXZFY1NPWDR2RWtSWEFwem80S20zYmZqMnFPQnA4akd4aEtvdk1ZOVBBNTFIWVlYS2t1V3ZESFdvNlNHSUdIUG4zU2lXOEJVNEpNUG9kbHFpVDdMR2FtMTZMSE1KNU9sY0gxLVR2c0JuNFNmdnVxMGNTQnFTbGduaF83Y01pNjdKQ3ZVNERCVDBmb3RURGNIOWlPLWhCbDdoaDExTGRDNlJ3Uk5jaXBKQlBiU2hvZnhfRmZQWUJrcGJ5NnJWZ0ZRTEhYNWVVdlhHOHdMVXZHektLbmNRbWt6T21xUEtEN19KTmpSajFfVS1nUEtlQjBWX0d5NjR0dTJERC1pZ3dSOTlBd01NTmthMmtZc1BHa0pqWG14anRlc1R3NGo5d1I1bnpvdm5GbDdLd2E2TVlhWTVycU1Sd1VJdDFXZUl6Y2czaGFtWmI0ZDVBTUlDM3BKMFlsbmxjVVYycC10YVVHcmV0d00tUmdVTUhLWFB6enEzTDMxUGhtLXFUZ3RmOU5qTk5NV254Mkc3WFJnd3FCakc0bndXR0o3LXBNa0Y0cml0cThBdG4zaV9DdmxiOFgtMzk4Zm15Qi1UNmNHVEZJUVFfOFB6Sk1HTkcwQ05UWVRxcWdRXzh5X21qZ1JBbW43QklVU2JwLUVIa1FOZEF3eHVXaDJRaFhDck5hV25iLTZwdDVuZUhwOGNuUzFnRDJ5OEIyNGlaY1ltQnNIWlBQdXVSMDF1empBYTk2RVdlSVJoU2VYQnFyMGVZbnNmUVZhLXhfQnBwTjVfdm5Wc2xodEdrdWEyXzFCZW5PLWNtSjA2ZU9JZjdJQWxBRmhDcUZpQ0JnZTJxWE1lUHpIRVNLU005S0pZVjZKZERqTmdieHVNQkFmQmhrTlJYVmxERnFPal8waDNRYVZUMkZUTGlDZDVGRDlfUTQ1WXFTOGZOdG5vSUx0YVJtbTRSVjZ6bEJDMVZ3TGlNLTVUNFVGenVUQXBRQlBLbVlsN2lFX3BJMHFDbG1kUUFycUlobGdkbzZVdGVmSl9lRjZfOHZXSEF0dWQ1RERzQTNNbW9xdUZmeXFXMklvdEV1SHhPa1VhX0lsM3NXS3p2WHZFOGdWbXNJZXo5UDc4X1VaWlVwbWN6b3o1R243UTJra1ZMc1RtYXk1SWdVUjFuc1U2aW9nSEl2ZEl1TVdEUnNFWUFXSG14WW50a2hfZk5rSWpsdHdQLXNsUGthZmJtcUNvVk0xeEE4bVZTNDRiME9EM0htUmI5Tzh2Umk5bzlqY2Q4cGl5TmVUMXZEQThhUFBpb3M3ZU92N290bUdHSmNya2VhaFBMZXdYSjcyLWdybmRtOFh2ZVFjeUp0WGpkRlJjX3JfQ05yeWFQYm9SX0ZEWUlzUl9SYmpQcGxyV2N6QXlMMW1sUGNOMURYbjA5bDkwazJCZVdPa3diU0tGS3d5VmtGUE1ZMnJyNEtVS2IxUFU0bG1nRS1ZbWVXTzg0ZUVtemctZVNkU0l4YXcydHU2dlhnZVJYNUtrVDFicjBmRE9RZmZsT21vanNLdWFkMlN3VG9PYXBFYkg2VUNTcGxNQkJ4ZzRlOFUyWk5ZMFNzQVg3ejVlVUtDdkpTak1ldTB1LVJjcy12bUhrSU9hVHNLcFRfVXJscV9PSjFjbmZJZ0RDaW9KY0ZyNnZobGt2UThPMkdaZkhiOHBPTTE3WG4xVExRTThwbk1fenJ6RXlwNUtHV3A4UEhRRF8yRkFZd0ZEQjdrNkVsbFh0cy1sVHlyejZ2YjRvTFpjZ0I3UmRVRXdTMmY1N3ROTFpTWnVZZVhBRjBBQUFMR1BjSUgwMUREVElNem1tOGJBcmZ6OWhFR19IOENRcTBWZHh1NTk0RC1oNkJva1dOekhlakhlanhYeVEwbWtDRHVnYkxMZWZiQkxkaDNXOEhFMlR0YVBPX2pab1FnbWZr)
          APP_STORE_APP_ID: 1570610860
        xcode: 12.5
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: 'develop'
            include: true
            source: true
      scripts:
        - name: Install pods
          script: |
            pod install     
        - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: Fetch signing files
          script: |
            app-store-connect fetch-signing-files $BUNDLE_ID --type IOS_APP_STORE --create
        - name: Use system default keychain
          script: |
            keychain add-certificates
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Increment build number
          script: |
            #!/bin/sh
            set -ex
            agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
        - name: Build ipa for distribution
          working_directory: ios/ios-automatic-code-signing-demo-project        
          script: |
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        app_store_connect:                                  # https://docs.codemagic.io/publishing-yaml/distribution                          
            api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
            key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
            issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
            submit_to_testflight: false                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
            # beta_groups:                                  # Specify the names of beta tester groups that will get access to the build once it has passed beta review. 
            #       - group name 1
            #       - group name 2
        email:
            recipients:
              - user1@example.com
            notify:
              success: true
              failure: true
        slack:
            channel: '#builds'
            notify_on_build_start: true    # To receive a notification when a build starts
            notify:
              success: false               # To not receive a notification when a build succeeds
              failure: false               # To not receive a notification when a build fails
    ios-manual-code-signing:
      name: iOS manual code signing
      instance_type: mac_pro
      working_directory: ios/ios-manual-code-signing-demo-project      
      environment:
        vars:
          XCODE_WORKSPACE: "swiftly.xcworkspace" # <-- Put the name of your workspace here. 
          XCODE_SCHEME: "swiftly" # <-- Put the name of your scheme here.
          # Set up env vars for manual codesigning (See - https://docs.codemagic.io/code-signing-yaml/signing-ios/)
          CM_CERTIFICATE: Encrypted(Z0FBQUFBQmd3TUM4WFBvZXhDR1pPcXFDQUJzRDZ2LVkzTDBzcFZvSUZabXhHd3laQjdEUElyczlTZVlMNi1uOW9IZy1rOVA2V0hKajRZZTBVSVdxNTFxeW9tSC1nYWJsLTFsX2hpVWRjSjRhQWM5dlFmYUlTV1N1T2E1SnY4S2lGYWZJcVkzRU4weElQVzhoUTQ3Q2h4V2IySmRnb0dZLTYyVHpaa2JiWGprMzk2SjFlM1Y4TV9INjJyVGhPUHRMMFkwM0xybndvWUw1VHhHejBUNHZ2bHpCOWJ0c1ZhYmxRcnQwT3FaSHJTR1JWazlzNDhuV1FsSDRJcm9MUXJlOXIwQzdJcDRNVHhRaGFOMWJHWV82enBvcmkzV1Nfa2wzSGJTR05pMkVWeDRCT2l6VjJndVNEUXpTWVJ3ZlFlMlZFbG51c2QxS09GR182XzQxZUNFZTRmWEVQdGJUa0VEZGVEU1pnSnhKcWwxWjRFZ2Zob05yYTBaR21oSlFmN0xwbjkybVdnSlZOYWR2UUFMR0ZRSDR4ekM3QTlsaG1FbG5ZZ3FlMVYtUHRnU0dpYTg5RW12ZHZGY3IwMno4N1FwRzROZzdNYTZJa0pFVDNyT1drcGFWMXJiLWotcDh4RmRhTkJKZGtveGg3MjZVd1dzSW1GSlFETDMtSTJJdndKcEdvUmNHSlQ4UXZoZ1k2b2NINTZWcDlETHI4SnZxUVFZZzNJVVdKRzE4aGN4UjlfWUVLQnFLTmFRQm13XzU3TTVMNDNOV1MxdXNlUkp3MDFaRHJtWUpQMldCbTVzWWhYanB3dEZNSUxZdXdqQWVCSExQQ0JReWo3c0pWUXpYbXZDb0V5ZUZtOWhVZWkzcVZCMUNDMVdfUHMxVXJMZGc3UnRiVkJ2MV9tZnJfQnBOYzB0TWVlclJCVnBsTC1YaUNreHdCRVpSNWpCcTJnQzJlX2pnNEk3dFU1SXRVSlhGaDBVOUZlYjBJakhQT0x2d3o5MDhhYVJEdmp0dng0WnYyLS1RYUtSeHpGOGtnTms2a3JrMW8xdzdvZmFpa3JGOUdtT0xnTFk2c1ZhR2lodDVfMlB2ZVRPMUdDNUM1ZGpJbmNEM0dxYV90eG1EUTJ3UEU5cTRBbXRwcl9XU0N1cmUwYlR6OGJ0VHNVZ3B3alhjS1BLejRHVFJGRVptdC0tM0kwcnYzMmpOODBRc0NtT2E5QnM4UFBPWlAwSEoyMjV6Tk11d1JHeENrRl9NZEk1eTZyNE02NWw4dDY1WU9NT2dTdGNDbXZZeUJERUhxTkltNHZ5b2EwUDcxRmw3RnVIQzBxbnctMmpra1FnbHF4dDFPYUlQR1N0QVJLN0NEVlRZTElXYVJSd1NEOUpNUGZ0eExaQmZ3eDZtTTh6R3Q0Ul80d0lyQ3RHU1llai1Gd3FIVlJXcUhIc0RPZmF4OG91RExSWmFZR2dSMlRKR0VUSkVlaEN0YnZkMDdwZmc3dTZSa2s4QnR2UHBObVpvdUN1ejZRLXNRenpfV3R6RlJEX05rQmJVTGxGZ2IyYnJud2owTThNUTRENmJpVzVzbnVfZHVOYzl6c3RpX1NGMlZCNzVYRDRVekVXc2htUDJnMmFvdElRTkJQeVczNzJrdVVvUDhpRUR1Wnd1RWhCa0g3VTYxd0t5b3NZTlI2N3pGUnBCc0JVeHNsaUJBVC1WbnVZdGxVeG55YU9iVWZQdnM3emNtQU56LTd5NWZIam8xUHlhZzBJQVUxbnhQYnhURU5sRG01ZFdrQnF4bDNLQmc0VUJzYTNPNU5kRVcwVTlwTGswblIzQzZZS21oSTg2RFpLem1hQ1pfelNYblRFNUFTYTRwekptZGpNQWRsRmNUeWkwaUxzZnk5WHlNZnoydmJXOTJQWGNyVU0xUjMwQVgtRHRHU1NwMDFMb2E5LTA3S29lbHFsdUsya0tGSlBpVng2NW1PS082LWlYaEJyc2dwejRRLVI2ZmRYdlhhUkhhZVl0Z2ZVVlNDWnhnZzRDUUhRcWpud0t1a2RSeDF2dG9XeGU1ZEFtd0pDRy1fdWQxQ08yZ0JHRVNfUktRaFFvbl9MNGRPeDB3QV9UY0QxTzlQTnIyQnJCTlZFdkxzX0RBS0tsc0tub0ItaEhUeFR6WGNtY3o5S1Y2Y1BGcG16UzdJMWlmd2tnM25ib3p1clhYcHNCN3dRWmx1c3NET3I2ZDZfQ0ZNMmNWMmZCVHpwQzlLV0lGd3lobFQzUUNZd3RVRGR0dlRaOExPTzJaX1dfNVJVZWFrZ0xaQWJ2ckhodmVMNGFKYUVUMzhtS2VZYXNQaXpudW16ZklzN2p1V1NqUG1xSEExSEowclRiSlp0SEQ4YmxOdmxmT3BjLVJ4WG05WkRmWloyU1VycnJMWUlPRjNMc2VzWExzRUpaVkl0TnhPN1dINUVOMXVZaS1SQnljTUFFbDNnRlJJdWY2aTh6VGZxakhlX19kVXFZSk05Zl9CQlZaSEtZeDVTS1B6dURFOGl1UDNwc0pqdmhGNkY0amZnelllb2gtdlNVeG1ib2lsaHNLOTZ1ZUwzSzVhM1BQZTZCWjQzbERMWHNqMWZYa0tEMDVQN3JuOExHdDJtTkZxZDF6YW9iamZOdGVfT05WRjNrbUx0MkJfRlhvcnRoWFh2aTJiaUpFbXdsd2VQOFU1TGl5cUNzU2FoUHRjTWtQaUszM0pCYVlmSkN4X2Rvc0hFYWVmYnRsTjVTMDdDdmJraWJhdWxXSE5fQTRwdmRVX2ZyR1hOSG9fMzJfYTJrOEN0WlR3RHFOZHlDNi1DUTZaSG5ZWTk3WDFPamxDOGhmTW1oR3AzR05rdVlnMVZKclp0ZDB1YXRoLXlCU2xMWFdHTURGRVhuZkFnRlpjZzRUZ01RV0YyZjhJbXJCSGRoRTM0ckRXMm5qb2d5SHJqc0ZHLTR1ZHg4bXBCc0huMGROd1FzMXdGWjJ5OTR2cXBheVR2VU40b1Faa2hjUUh5UE9IdEg2UURNWG9PUm91V29rUF94Rjk0U0NSOEVJSlpzeDlSaHNIQ0ZQd1RHak1HYmczb0VkeHNPcTZ6V3UyQ3dVbFBiZkhuS2I0R3FnQ19HUEdsNlB3RVVQcnVQZkhTSXBJVXZFRzkxa3d5aVBQUXlzSW05VlRVZXZfcnNyOHBrbkJRcVRwZFJZc2FYbFFqNDVqdFNCenBSSVQ4MS1MeDA5S0tPWmZoWGdUY0p0ZzhFQ2JILXdMcmJKcWV2dEE2dlpFOG9WcUsxMFpyVEFBVnJfTVNEa2t5aHJEUVhCSEZrRzYzZUMtVEJwQWloOHVyaFFWd3dKZ0JkZHlDbTlLdWQwakVtaWNDUmpERXR2T2Nkb19Nb3U4dzNzdmo5NVVTRGM4al9yZjVrVnJBR1VWYXRvYzRQWnB0QnFZa2llYzdwNFRVRGQzUXFkT3o3UUFQUGR3SlpZbS1pSzBVb1RkRlNlUG5KZ0t0WnpYSlN0ZGlrTjJDMjEtZFRJM1hQSktVX2REVVdSOXVmRFNwRHQ2WnFVWERnQ0Y0d2dzN05HV2hnQlRoRE1tX0VvUERSeVFxTHJQS0JvUk1jWUpsZmVISXBTQ1gwd2ZVc1F3RWdNdnpkeFBjRlFpUVFBakxtS05uU3A1Szh1U3g0OXc1R01sNXdpQ0tQaTdHakFDeExUUzdIeDFfQ3Q4VjNoV0ZjV1BjYXBFX012S0NSckFaWldPbG5hSWdKZHpObGdpVTFseU9mbVpXWEtOZ2EzU2Z3SXNfLVdGeHk3d3dwaG9mcHAzWjFDdFV4cGl3WjNmcW53X1dDUml4STNSdy1rQmZkTnJmX0pSMUdSV2FwSVcxRGlGWVRtcHRBbzdIOHBKN0V5UHpId3hWMG55cDUxSGtRcEp1QVI3N2l6QmFDVWFmVk1qSDVQRmloUGRscmZxYzNPU1RZbVZ2UGZJd1hqNERSVzhyanlyemx0SkpZVS14U2dRUzUzcFN4Q0tKTGt4RXhfWG5sMF9UUXFfNkE0enBaRUhTUlh4RjN6N1Z3NVhIU2ZGM2k3TWF0dEE1SXJWaXU4Q1Y1eDk3Q2p3NFZ1QXlhVTR3RExKNDBxOWtNcHZCTnVYRHNRQmRzWGJ5MVZyMzVqOWpNcFA3QUZrWG5WXzBPdUJqQkZBbHBjamh0SXVKYjFyendKcFN3UExjanlETlZFSmR6R0JQTW84bHEyOHNxOVNYWU9HaWVac2E2bDBTZ2pNNU5hVjd6X3ltVUtROHpWVEFDU3lsV182RHBmekMzLVhGUkFnMU9FR3RqWGRRaDJfZE1qQ253QVBqcmc0bFNoeHd3eHVxajc1M0pNWl80N0hRUjdQZ19vTHRPLU5BbUNubnRscFV3d1hfNE1JQXF0Y1VoQ0toVzI2cG0zOFBJeWNRZFl2XzNHUkJWQi1EQ0xRZ3FJZzJsc0ZUSlNqeXlxZXdOM1M5SE5mTlBFcjBIZ3BXelB5aTZnUTJfb3NOUm1MVEZhUkdwcHE0dlBfZUhmdmZPS0dFTDh6dm1hZkRySHJEeUZQSWs3MkVWckhZeTdFUVAyaFRHcmhKNUhoOGI2bE5Fb0g4QWRwck9pcnlDcEZaRTQ4MmRfbEkyQ0FZakZWcUluZGVEeHFjczRWM24wMkFFdGJVc2ZmSERUNmtLRVFHYlo1VVVzMmlIdkVPUk5YOWt4b1YxZk9uOXB5T3RDZTRjMVd2YWtWWUdzbHRGSU9tTTY3MXlkRHpfZHJGemJJRllZYThBTkVtZ2JMZlQ3MFFES2ZRNU9wWFVFTXBRbUF6MjByRy1ieWQ3MlZSNHpETlpiNnBOVDROX0MyN1l2LVVoTUhWbkpVeDFWU1lxeF9jNmhyOHhXaEdZTXFUYm94c05ndHJ4bDB6VTlGdVZGcTVCUDJRMmJMQlpjU1VpcXYyaGc0bk1Sd190RDRMZlBSSklhV19UYUNXXzNaODFVNjN4MTBrT0NRMDQ1SG1ZWExXbGtjdTd3amxHXzZUa0JtdlZwbkpWV3hiUkpFLW1GdVpTcHJxQWdRVjI3cDJmamlhVWVQaDFaenpTdDBvaW43dHNTeHE5ZjZXTTd2YmVneFdKY2c2d0xZSmVHMUpvZzBGaW1DNEV5UEgtbmQwVWFfQ1E0b19iSWFHQnB5WUZFbHBHNVlNdkxjU3pPanh3Z19vaHNsMFpzbEZ6SlBTc0pIX180NUpmMVJrTG1HM0VTRkV1UFlxSU04a0labmwtZnhIR2R4bGE0LU9KaGJCZ3ZaOUh1eGJ4WWpOTXo1MEpCU3ZtNVFjZG9NSlhra1ZaVFM1TjhYN1ZsUnRnTTZleEIzYS1hM240V3lzQVBQV0NObVo4S0VveWRVQ0cwVXR3N0xKcjFYUDhJcmNjNG9qLXBnTHliNXFRai1YR0Z2MlhYZEJaZ2ZpclBOOWxSZEM5aDBobmtLQk1JclotX2JIRjRRcUZXZTBNTUUxUmZaZk9tSG53YVhoRWJaQldwNDZlTUtNYXVQcUI4NmtESjFqM2hsMTdGT3NmWjdGeEthYXF5RnJqZDV0Y213Qy1LUjlfY1NocHJsSmF2ZGV5U3JKNUxoamdPcnJCVXRYM3BFN0c1aHVfZ0hTRVBtUUFHLXI2TVVGQkhrZTFnNlpiOFFuT25FNjJvZ2VJMjc3ODQ0N1lMQ3hwNzl1a1FrSTlRUnJjZ3NKVkdGTVZhcjB1RGVaMkw5eE1EaDJIYkVBamVzQ1l3YXZ4eldtbDdPQlU5dGp2bmk2ajBmMG8wMTZ1eHp5NnNkUXNFZm1Yc05LVHdmOFhSODZCT3c5cnRid2NVR3FWZzVQbnNyRlZYSlVyRENINGJFcGlkRnVPUGZ3ZFgweVcyUW1kMTFsNll5ZEVEYUdhd09SdGE1TzdfNS13Q1lZQkhsRHNKU0w4YnFGWnhVaTdBVGZ4UlpEYlNNcVBITFRWLUczejJrNUVRcTZRaGljZzRxTUVIU1lad0RpamZiMTg3VmpmNTBIQ19jREFvcmpHMHBLOWdGMGtURzJLYU5Va2JoYW5iNmc5SENNNGFRcHpaRnc0T3pXN1Vkb3Jsb0ZLakF4MmhXRjgwQjN6Ukg5ZjV3SDN4aXRxUVRaU2NwOVVTSWt6QXNzMU51QUNLZU9lTllrUmwtTTFIbGgyNVVFel9nUXh2RVNSdmZLdFFHbjUyd1NoaU1aclVmcnZaUWhtRFItQ24zRUpJUnpWSUU4TkpHM040ZUxxYnROY29hUk1aVUxta3FadXFrVVhteEFrLV9tUUo3ZzZGUkp5MVo4WHV0ZWpRRmxpOWhWdjFXWUJxNlZKcXJYcExLcjcyTHc0OTBoZ0V3UlByUFR1a2NCWkdvemNKYlk1ellvWUpfejN6VVQwTE0zQlZpLTRzVENOQXNJQ2FRMkZRTXNLVXROdm5hb0JVa3VocjdnLUpJVmtfQmczZTlfenVzVVdZakVPaXdMZ2hwYUxPeG05WTJVdEVTSkxROGdqU3k5bnJGS2tKTUY0T0ZFTTB1Yjk5V1hOVW1OYXVzbjFrUURlMjlzNXRxYmdvQk9OTnlNb3kyYlRoRXRDaVl3RzM5RENVbXVKSmtnQjQ0V2R6dUpMQm43SDVObU9nUzRIQWVoeHpiMHF2Rm1xcVlVRVVEUHprQzNvMl9IbksxeV9pNV9aMzFyR3JfS3RWdmpzOXNWRmlPQ1RtdmEwbXptdDZwSEZWaTFhUFlRYVNONGg4aXRxdFhLRTdRY2VINWNnOXpsS1BUdUUyTmRCV2kxeU5rN0wwV0VERlhmQk9vLW0yZGgwUUdvcUN1TmZkZ2E4V1lRaDRwSjdjTjVsbzR4TzFYbUg0WTc2SkVuOUstdVBzY3o0SDlfaHFuYzk0eGhFMHZBNHJyUG9mdTg5Qzl6MFpQQnNHMXNJb3k2a21yNHFaeDBCckJ2YXBzSmdZb0pJZThHaUt6bXV4c1d1a013RVdqcjc0eFdLYVZQelUxSDdMUlp0elRxOUlPV3N0STVYZWFBVG14Y3RKazdJeGtDRGZ2M0RicWZPMjVNVjNRaFN3THYybzlnQmhYTUFwVnlaSVFQRzZyZ01tdi02R1ZIUzRPN2xGNVk1ZExUN1NRWElWNlhlZkp4ZVdYVDZvWS0wR0NxWkQzMDFjZjhvRE5nN3RlT0pqYzliX0V0UTdMekRIRHJlZWZPNnhPZWFFVUZTMnFVV2F6VDhmOEp2bEZYQk5tREFsR3g1ZFo0WWpzZ1lIU1BGdXR5eXhhSU5GVHlGbnVOZ1d4dWdmM2dpMDlnai1KUnVuR3ozVzluNjRfd3Z0ckpBdHJhSktwVFhFTjctQ0JJU2FDUkZxOVVnOWVYRDhqdVEzeGhoNnBVZk9idHI1enNmNXNqTmtHeS1sQWc5N0g5eWdmeno4NjlfVHhLSUcwd1hzY3lvODBqaTlBSnNzQTE2TW5VUXdFaUN3aEtoLW1hMWhuUzNSejdpZ19YZHJRUGFfTDBxQ29JQUFJNmZ5Zy1qMmNkcEpuX3ZvU2dSemx6SENkQWRoRVI3cDh6azc2cnVJVDRLbHVoRUhWWHhjSFlkNDFYTkdzYzg1VjBIeHdxV05jbXpCNmpXZk5SU1JieF9IdUc5THhRdkFOUjNRU1pvUHYzdERaSGVGUkYxSnVlU0tPcUFxdWZFSzU5djliTXlsV1RQU3UwRTdSakhQYUMxMnpPbl9NMkNMTzVoX1hwakdWc09oZ1RqT3FfajRBd0w2NURmZXZhUXRqdHFoR2VDNnM4RklETT0=)
          CM_PROVISIONING_PROFILE: Encrypted()
          CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd3TUNPMlNBbWFwU0FaWm8zSDB6MjNSTVNmM2NUSkJIcjdOOXdtVXphb3c2Y2ttQk9teGtKTlEzZ3pwSzNQQkUyM2pfWVlLcnhIRlpYaDZhQmVvYXJQZnJQeFlMODNjU0ptcE5OekFOTXpoLXN0UG5PNG4wQ0VVT0ZHRE5CbWhja2R0b2R0S0QtVlNLV0lQaVdHUlAzOVlxbHVtekliQ2htNThkaWllQ2E5SkdRS3pQMkljamstZ3VDeVp2RlVaNUJYcjdhQzFVZ2t4dHJucXdHMXdoV1Q1RzRxLUlpY29oZ0Y1dExvLUFJUmxFQUVqdFE3dVNoYmVSUVZMUVN0Q3U3TnZoMWdrT0hRUFJYWklOVm5WUm9yekkyZ2QyOTdwZ1Y5U0VrZUh1TjJ2U3FSb1dfZVFOTzdoVUN1ZllzdHNkWXNSOFd1Q09lQ01NVnkwQ2E5UGRUdG1LbE9OREt4YXhSR1JqODFNSXFJUWxMd1Nhak52RmJyeTlQRHZaMGhHU29NdExJVlR2dXMwZ1pac2did1NNNjVTbEVXckpPUHYtcFd3VE1oZWI1SkdpNEFoLUtLYkhOMUxqRVZHLVRFZ0lweS1aUkduMWdUbnVqR1dTTVgzQzRsUGpzZGY0QXYzemJ2TUNqalNpamFCS3FDWkpQSkx6Nlh6U3FmODZlX1phMjItcFZ1c1U3czJ3Yy1VUWRMQWYwaUN5ZkZxRUxVTUNQeVpabUFrY2JyV0lnVm55Y1pCNzBUYlZJS0JvSlJCUGNhaEV2ZHZUNGJpVm1Bam9rT29QX2htaWVuTF9tZW9JMEYxd3dKckZ0MngtS0RCQ09hVE92T25ZNUd2czhYMGk5STBBbzZuM1dsSllGeUkzZXcyck81eGR0VjN2NGlnTFJsa1VVbWM0enlaYVlQYnk1VjRTeUgwY1JOMmRYcXppMG5xbnNITThDTkNjMy11cGJpdEVOX0R5ODRjQTFWbVhtUHZFdFllYTlLYVFub0xzdDRUNlZVdnhUUWZDeU11cGQ5TC02bnd4bXlaUWh5OU80N3UtazJZUHR4TTNDbUxHWDFyMXJ0YVhGc1diVzBlajNaaTI1RDRkcmtBRXBPRFpWSFpJODdsWWFhd1pOODJHSG9vam51RXhEOWZxcDNfZ21jU2pSTEFNeV9VaURZVDA3NWFtTDBwZzVCQ1VkcHY4a1kwbmdMank2NFVzZC14UGllckJoU3pnRWwycWl0WEE1WnJBMElwTXlGRVJNcE5VTDVFZlZUeUg2SGFUTURMdUVwdlFnY2pTNU1BbldTbVN6N1R3NEVBdXlXbDhpUWcyYXRfVkJwaFBKU0pOZS1jWVdDbnVUZ2g4SFR4MTNyU3k0QklvSFFsbkZOUHBucTRYalZSMXU4Q0VvOHFGcFctRHdNd1cybzZnVWxwTzJUWTVubER3UktRYlpacm5BMEF0OUJ3TF9nS0xFSUhvdTBOYXU0dEdaRFhJaXpGakdBaVBBYWx4VDZSMnNaNlBRWTdNQmxnN1puYXlneWxhNGE3ZFpzdi1IY3RFRTZYZDhJNm15UnE3Y2d3N1duNGxtRjVHVjk1Q2xZeUdLYWFsMDRkOHIybDNIVllMd01qWjVZc2lFbEtnMVJaMFB2TTRrQl9Ubzc2clFXMm94Tmk2djFmb3ZoaG5icUU4QTU5VWhTVjViVHNoX09GNkVDMjJVeHJiYUQ3bk1QU1VVdEM3c2JTTWh5QmhVMktrU041OTRtR0hpeU0tOWlvc0xibnI0Y3lhUWxGQ3YtUUtXZFdTWWFEeHlNMzJaNy1aUVI4Nm02ZE1Pd0lfUmpMYlhXZ2NvRWhVaGhIb3dqV2J1TVlXQUkxaWNidUhZQzdKenJDV3ExcElJSmlEUWpma2w2ellsZjI3SW5vbzRBZmdxSjVPdHBQTlIzcVl6Y3hpcDF0eEpFa1lTSmxFSlJ4SU9QSzNDMXJJOS1QVXVOR1paNnlHN3gxY0tuMHZXV1p5UHE4NEhRX0k2MVBKOGhyQWF0WFNNTUszUkVTaW5LckhkQW1qa05NdU1YTEpqb3ZZbE5zdHlGcHJYTkM3UVNPdnBmWmhYdUppUW13U0RiN1J1LWtPNm0xM2FUYV9aNzVtRElJMlNzWC1KSjNqUXFNbkJJVG8yOENKQnJSeWdud0dMcjJDQVJLcVBTaTVueWdUNHd1REJLUzRXX0JBLU9uc0lxR25DTF9jR0xQTHY5VXFUMjUyRmM3Ui1XYVphZWQtaHFqSFJZTW1UWFBYaWVXdDlPb0k4ODhDVTd1UjJnekoyN2VsR0FLODVIODNQOENWTGRIRkFfb2tfa3ZZd251eTR5aWVTeFlRYVNFNmdhVnJMM0N2eGdDalgwM0NmYzBndTFMRlYxYWViTjRZZXc2a1dpN1VvbndMZmh2YkdFZkpQYkhQQ3FEQTI0a0VEYkZtQVlNVTlmbVRPZm1lTGtyRURzZjJudWZjaWJBSnZwdFM0Qnd0R1U5Uk9mLWVBbVlGMTktQW9BaGMzd1JPVVFCMUp6VWRQSzVrai1oNFo3akxnRXJJWm1FNUYwWEQ3SXl0aFJkVUUtOXEtcGFIMVhOb0theVN6TGxZSGN0TXJ1Y3lhRERSNFBEOWVTcWV1UVFxTk1VN2VGenREdkI3bmJwM2ZjQ1cwUTdWSDdrYjhsSVNRTEhDMEtCb1RoZUZPc0Ztek1oMThRUWF6RnZhS3dlZUFJcUtiRGVKYnM4am9qZTJFbC1YZmFOalNfRnNJbmpHNGpjcVhsOHYxZ0g3SllabVhYUUwxa0FhZFd2MmRKSXFVUktvTkJ0Q2NQc1JaUlFCYm92amFzSjBaZkxDd0hEekhEbjRpYkFrWFJlT0xBMDZZNTlpOEw5bkxRY2xoWm5CYkE4YkN1MlBsMzlYazZHX21wWkdQX1M2OU56REJRcEZ2MTVkTnA5M2E1WkNoeXZNMnVCOHVrSzkzeDl3VXNBV25ldGtiT1NCM3RxRElqSno4NXh3UjJIcXNmV1daeko3VFlYNmJ0QjBhSzloUVlxM2FaWW9sMHpUNllBVUt2bDVXUmpPd3JxQVhJcjlD)
          # Env vars for automatic build versioning and publishing
          APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
          APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
          APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)
          APPLE_ID_EMAIL: Encrypted(Z0FBQUFBQmd1S0xRNDBqLVQ1UkJac29IeEVxWjZQRmNRbTQ5U1pFb2cyRlEwUHBSMGtnLWZqc3ktRE5VeHJYRnF0TmJDSjh5MDNGM3dGZnI5ZHQ3MzY3bWN2TGJ3RGVnY0pSUnJpRWY4VkZSRWMzaEl1T25nZzQ9)
          APP_SPECIFIC_PASSWORD: Encrypted(Z0FBQUFBQmd1S01mbTZWTnRqbTc0U2tDeGh1TTZkZjQybHNFeUthT3FvaUx1ZXY4eWVkbkxxV1NuaVJrU2lKT3VMY0VWLThBbnVkVEVwZ0xyVThaU0JJMUxORmxyUXVOcnA3Tm1BQzhUeEpxbVVnS1NpWS01TGM9)
          APP_STORE_APP_ID: 1571469558
        xcode: latest
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: 'develop'
            include: true
            source: true
      scripts:
        - name: Install pods
          script: |
            pod install        
        - name: Initialize keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: set up provisioning profiles
          script: |
            PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
            mkdir -p "$PROFILES_HOME"
            PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
            echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
            echo "Saved provisioning profile $PROFILE_PATH"
        - name: Add signing certificate to keychain
          script: |
            echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
            keychain add-certificates --certificate /tmp/certificate.p12
        - name: Increment build number
          script: |
            #!/bin/sh
            set -ex
            # agvtool new-version -all $(($BUILD_NUMBER +1))
            agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Build .ipa
          script: |
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email:
            recipients:
              - user1@example.com
            notify:
              success: true
              failure: true
        app_store_connect:                 
            apple_id: $APPLE_ID_EMAIL
            password: $APP_SPECIFIC_PASSWORD
    ios-magic-actions:
      name: ios-magic-actions
      instance_type: mac_mini
      working_directory: ios/ios-magic-actions-demo-project
      environment:
        vars:
          XCODE_WORKSPACE: "swiftly.xcworkspace"
          XCODE_SCHEME: "swiftly"
          BUNDLE_ID: "io.codemagic.cmswiftly"
          APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
          APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
          APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)
          CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1TUpCQWM0aEtWTHYwSFdHb0lyTFhlajcxZkV5VkhQWWpkVjFnNG1NVGI4YVFfWEdyd1F6YW1LWjIzeENkVWxjNlhRSnQ5OWNqNmdqNm84d3FmdlhFQUNRNmp4Ym1Sckp1enBfUEpKdmJMOURETFFwdFNoVkhuWl9tdGJBNFFyTGw5RXpQMUVjWjBvNFlHUnVSajl6a2RLNWNUN2tUcnlwcUFtUzEzbXpubnJaQVdHODdGWnpTTDVCRlVTTm9feUIybkpyVm14YzRzV29BSV9PNHRoTW1UUUFmbkNtTURIWEVxeHFCTlNDZU5UNzNaaHlJMk8xWFJ4Nlc3cXNwcU1OZmVVdW5SYWpHVVotNkNYVVFYQVZSZ1B1cE9fd05BNzl3TlphZ3VaQjFocy1TTjBXWXQ4NXJubFd0dmFEMnVlODJYYUJrY3RibllNODJsai1BcENlRFM4TmVtNGczM1ZoM1p1UkRNQ1dLZ29IaC1pdlhQN1R0RnlYc2hvT2ZvSzNLakkwYkJKVjJBX0E4R0F6ZGpmQjhMM081U01TU3ZFc0hKZXBRZThzUWRLYks3REowT2JRd1BYeWJCenRaYU5jZU5GNXBXREpRcVBhc3l2V2JOUUw0VWhJb0xCcGM1b3VMdUJzdUhCVnVxNzhFWkFDbE9EREE2YlV5SWdpM1JWYzBmZFUweXFrLWc2Z2ZOenJLLXc0V1hkekZyOVJPSFBPek5nNUdvYjlROWtiNmZ4V1dLQWF5VHdxM0oxS3JZN083YTNfUDFmWmlFcjRreDJjNFBKelEwcTBYVGJraUJWaVRXZ1lJUm8wZWFmN2RMMzNzQTQ3STU2SkM3MVlkRVNQNXZrUmhMN2c2QnEtSzlFVUxISVBCU05Jc1FFNXhGVHp0cmNjTUhDS0FYX3F0S1B5V0pmZGRGRVFEa09ZMGtWY0hHLXBobXl2UDRrYTAzbEhDRkxBN2xpQUs4eWpWekdfQmZwQ2JDbmgzS0JGY0ZlVkgySWIwUHh2c0JzRnFPYm95c256aTBVRmZuYTZaZ19xSDIyX1dmRGZUTmhjTjlGd1BSWlJHbGZsRDNsM00xUkJRTkhUY0xrOG1sQl9Za1AtdjJpMWMxTEJzUTV0eGdwekxtM1hTNXZFY1NPWDR2RWtSWEFwem80S20zYmZqMnFPQnA4akd4aEtvdk1ZOVBBNTFIWVlYS2t1V3ZESFdvNlNHSUdIUG4zU2lXOEJVNEpNUG9kbHFpVDdMR2FtMTZMSE1KNU9sY0gxLVR2c0JuNFNmdnVxMGNTQnFTbGduaF83Y01pNjdKQ3ZVNERCVDBmb3RURGNIOWlPLWhCbDdoaDExTGRDNlJ3Uk5jaXBKQlBiU2hvZnhfRmZQWUJrcGJ5NnJWZ0ZRTEhYNWVVdlhHOHdMVXZHektLbmNRbWt6T21xUEtEN19KTmpSajFfVS1nUEtlQjBWX0d5NjR0dTJERC1pZ3dSOTlBd01NTmthMmtZc1BHa0pqWG14anRlc1R3NGo5d1I1bnpvdm5GbDdLd2E2TVlhWTVycU1Sd1VJdDFXZUl6Y2czaGFtWmI0ZDVBTUlDM3BKMFlsbmxjVVYycC10YVVHcmV0d00tUmdVTUhLWFB6enEzTDMxUGhtLXFUZ3RmOU5qTk5NV254Mkc3WFJnd3FCakc0bndXR0o3LXBNa0Y0cml0cThBdG4zaV9DdmxiOFgtMzk4Zm15Qi1UNmNHVEZJUVFfOFB6Sk1HTkcwQ05UWVRxcWdRXzh5X21qZ1JBbW43QklVU2JwLUVIa1FOZEF3eHVXaDJRaFhDck5hV25iLTZwdDVuZUhwOGNuUzFnRDJ5OEIyNGlaY1ltQnNIWlBQdXVSMDF1empBYTk2RVdlSVJoU2VYQnFyMGVZbnNmUVZhLXhfQnBwTjVfdm5Wc2xodEdrdWEyXzFCZW5PLWNtSjA2ZU9JZjdJQWxBRmhDcUZpQ0JnZTJxWE1lUHpIRVNLU005S0pZVjZKZERqTmdieHVNQkFmQmhrTlJYVmxERnFPal8waDNRYVZUMkZUTGlDZDVGRDlfUTQ1WXFTOGZOdG5vSUx0YVJtbTRSVjZ6bEJDMVZ3TGlNLTVUNFVGenVUQXBRQlBLbVlsN2lFX3BJMHFDbG1kUUFycUlobGdkbzZVdGVmSl9lRjZfOHZXSEF0dWQ1RERzQTNNbW9xdUZmeXFXMklvdEV1SHhPa1VhX0lsM3NXS3p2WHZFOGdWbXNJZXo5UDc4X1VaWlVwbWN6b3o1R243UTJra1ZMc1RtYXk1SWdVUjFuc1U2aW9nSEl2ZEl1TVdEUnNFWUFXSG14WW50a2hfZk5rSWpsdHdQLXNsUGthZmJtcUNvVk0xeEE4bVZTNDRiME9EM0htUmI5Tzh2Umk5bzlqY2Q4cGl5TmVUMXZEQThhUFBpb3M3ZU92N290bUdHSmNya2VhaFBMZXdYSjcyLWdybmRtOFh2ZVFjeUp0WGpkRlJjX3JfQ05yeWFQYm9SX0ZEWUlzUl9SYmpQcGxyV2N6QXlMMW1sUGNOMURYbjA5bDkwazJCZVdPa3diU0tGS3d5VmtGUE1ZMnJyNEtVS2IxUFU0bG1nRS1ZbWVXTzg0ZUVtemctZVNkU0l4YXcydHU2dlhnZVJYNUtrVDFicjBmRE9RZmZsT21vanNLdWFkMlN3VG9PYXBFYkg2VUNTcGxNQkJ4ZzRlOFUyWk5ZMFNzQVg3ejVlVUtDdkpTak1ldTB1LVJjcy12bUhrSU9hVHNLcFRfVXJscV9PSjFjbmZJZ0RDaW9KY0ZyNnZobGt2UThPMkdaZkhiOHBPTTE3WG4xVExRTThwbk1fenJ6RXlwNUtHV3A4UEhRRF8yRkFZd0ZEQjdrNkVsbFh0cy1sVHlyejZ2YjRvTFpjZ0I3UmRVRXdTMmY1N3ROTFpTWnVZZVhBRjBBQUFMR1BjSUgwMUREVElNem1tOGJBcmZ6OWhFR19IOENRcTBWZHh1NTk0RC1oNkJva1dOekhlakhlanhYeVEwbWtDRHVnYkxMZWZiQkxkaDNXOEhFMlR0YVBPX2pab1FnbWZr)
          APP_STORE_APP_ID: Encrypted(Z0FBQUFBQmhHazh5VTBoRk42SEpEVURZVFIwZDZrUC1Yd29lUlEwbmxKWktEMTZDX0RRd0VLbzJmLXlPVTZFYkk2UUd5Q0xJZmw5U21NQ2wtM0h5dWpwek9xTUR6Y2tTN2c9PQ==)
        xcode: 12.5
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: develop
            include: true
            source: true
      scripts:
        - name: Codemagic CLI Tools build
          script: |
            #!/bin/sh
            set -ex
            pip3 install codemagic-cli-tools # The Codemagic CLI tools are already installed on Codemagic servers
            keychain initialize
            pod init && pod install
            app-store-connect fetch-signing-files $BUNDLE_ID --type IOS_APP_STORE --create
            keychain add-certificates
            xcode-project use-profiles
            agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
            
            # Use Codemagic to publish to take advantage of asynchronous Magic Actions otherwise use app-store-connect publish command and pass whats_new.json for release notes.
            # app-store-connect publish --beta-build-localizations=@file:whats_new.json 
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      publishing:
         app_store_connect:
           api_key: $APP_STORE_CONNECT_PRIVATE_KEY          # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
           key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER        # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
           issuer_id: $APP_STORE_CONNECT_ISSUER_ID          # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
           submit_to_testflight: false                      # Boolean use to indicate if you want to submit to TestFlight review so external testers can test your app             
         email:
           recipients:
            - kevin@nevercode.io
    ios-fastlane:
        name: iOS Fastlane
        instance_type: mac_pro
        working_directory: integrations/fastlane-integration-demo-project
        environment:
          groups:
            - ios_credentials
          xcode: 12.5
          cocoapods: default
        scripts:
          # - gem install bundler:2.2.27
          - bundle install
          - bundle exec fastlane beta  
    flutter-yaml-ios:
      name: Flutter yaml iOS
      instance_type: mac_pro
      working_directory: flutter/flutter-android-and-ios-yaml-demo-project 
      max_build_duration: 120
      environment:
        vars:
          XCODE_WORKSPACE: "Runner.xcworkspace"
          XCODE_SCHEME: "Runner"                
          # https://docs.codemagic.io/code-signing-yaml/signing-ios/
          APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
          APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
          APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)         
          CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd3TUNPMlNBbWFwU0FaWm8zSDB6MjNSTVNmM2NUSkJIcjdOOXdtVXphb3c2Y2ttQk9teGtKTlEzZ3pwSzNQQkUyM2pfWVlLcnhIRlpYaDZhQmVvYXJQZnJQeFlMODNjU0ptcE5OekFOTXpoLXN0UG5PNG4wQ0VVT0ZHRE5CbWhja2R0b2R0S0QtVlNLV0lQaVdHUlAzOVlxbHVtekliQ2htNThkaWllQ2E5SkdRS3pQMkljamstZ3VDeVp2RlVaNUJYcjdhQzFVZ2t4dHJucXdHMXdoV1Q1RzRxLUlpY29oZ0Y1dExvLUFJUmxFQUVqdFE3dVNoYmVSUVZMUVN0Q3U3TnZoMWdrT0hRUFJYWklOVm5WUm9yekkyZ2QyOTdwZ1Y5U0VrZUh1TjJ2U3FSb1dfZVFOTzdoVUN1ZllzdHNkWXNSOFd1Q09lQ01NVnkwQ2E5UGRUdG1LbE9OREt4YXhSR1JqODFNSXFJUWxMd1Nhak52RmJyeTlQRHZaMGhHU29NdExJVlR2dXMwZ1pac2did1NNNjVTbEVXckpPUHYtcFd3VE1oZWI1SkdpNEFoLUtLYkhOMUxqRVZHLVRFZ0lweS1aUkduMWdUbnVqR1dTTVgzQzRsUGpzZGY0QXYzemJ2TUNqalNpamFCS3FDWkpQSkx6Nlh6U3FmODZlX1phMjItcFZ1c1U3czJ3Yy1VUWRMQWYwaUN5ZkZxRUxVTUNQeVpabUFrY2JyV0lnVm55Y1pCNzBUYlZJS0JvSlJCUGNhaEV2ZHZUNGJpVm1Bam9rT29QX2htaWVuTF9tZW9JMEYxd3dKckZ0MngtS0RCQ09hVE92T25ZNUd2czhYMGk5STBBbzZuM1dsSllGeUkzZXcyck81eGR0VjN2NGlnTFJsa1VVbWM0enlaYVlQYnk1VjRTeUgwY1JOMmRYcXppMG5xbnNITThDTkNjMy11cGJpdEVOX0R5ODRjQTFWbVhtUHZFdFllYTlLYVFub0xzdDRUNlZVdnhUUWZDeU11cGQ5TC02bnd4bXlaUWh5OU80N3UtazJZUHR4TTNDbUxHWDFyMXJ0YVhGc1diVzBlajNaaTI1RDRkcmtBRXBPRFpWSFpJODdsWWFhd1pOODJHSG9vam51RXhEOWZxcDNfZ21jU2pSTEFNeV9VaURZVDA3NWFtTDBwZzVCQ1VkcHY4a1kwbmdMank2NFVzZC14UGllckJoU3pnRWwycWl0WEE1WnJBMElwTXlGRVJNcE5VTDVFZlZUeUg2SGFUTURMdUVwdlFnY2pTNU1BbldTbVN6N1R3NEVBdXlXbDhpUWcyYXRfVkJwaFBKU0pOZS1jWVdDbnVUZ2g4SFR4MTNyU3k0QklvSFFsbkZOUHBucTRYalZSMXU4Q0VvOHFGcFctRHdNd1cybzZnVWxwTzJUWTVubER3UktRYlpacm5BMEF0OUJ3TF9nS0xFSUhvdTBOYXU0dEdaRFhJaXpGakdBaVBBYWx4VDZSMnNaNlBRWTdNQmxnN1puYXlneWxhNGE3ZFpzdi1IY3RFRTZYZDhJNm15UnE3Y2d3N1duNGxtRjVHVjk1Q2xZeUdLYWFsMDRkOHIybDNIVllMd01qWjVZc2lFbEtnMVJaMFB2TTRrQl9Ubzc2clFXMm94Tmk2djFmb3ZoaG5icUU4QTU5VWhTVjViVHNoX09GNkVDMjJVeHJiYUQ3bk1QU1VVdEM3c2JTTWh5QmhVMktrU041OTRtR0hpeU0tOWlvc0xibnI0Y3lhUWxGQ3YtUUtXZFdTWWFEeHlNMzJaNy1aUVI4Nm02ZE1Pd0lfUmpMYlhXZ2NvRWhVaGhIb3dqV2J1TVlXQUkxaWNidUhZQzdKenJDV3ExcElJSmlEUWpma2w2ellsZjI3SW5vbzRBZmdxSjVPdHBQTlIzcVl6Y3hpcDF0eEpFa1lTSmxFSlJ4SU9QSzNDMXJJOS1QVXVOR1paNnlHN3gxY0tuMHZXV1p5UHE4NEhRX0k2MVBKOGhyQWF0WFNNTUszUkVTaW5LckhkQW1qa05NdU1YTEpqb3ZZbE5zdHlGcHJYTkM3UVNPdnBmWmhYdUppUW13U0RiN1J1LWtPNm0xM2FUYV9aNzVtRElJMlNzWC1KSjNqUXFNbkJJVG8yOENKQnJSeWdud0dMcjJDQVJLcVBTaTVueWdUNHd1REJLUzRXX0JBLU9uc0lxR25DTF9jR0xQTHY5VXFUMjUyRmM3Ui1XYVphZWQtaHFqSFJZTW1UWFBYaWVXdDlPb0k4ODhDVTd1UjJnekoyN2VsR0FLODVIODNQOENWTGRIRkFfb2tfa3ZZd251eTR5aWVTeFlRYVNFNmdhVnJMM0N2eGdDalgwM0NmYzBndTFMRlYxYWViTjRZZXc2a1dpN1VvbndMZmh2YkdFZkpQYkhQQ3FEQTI0a0VEYkZtQVlNVTlmbVRPZm1lTGtyRURzZjJudWZjaWJBSnZwdFM0Qnd0R1U5Uk9mLWVBbVlGMTktQW9BaGMzd1JPVVFCMUp6VWRQSzVrai1oNFo3akxnRXJJWm1FNUYwWEQ3SXl0aFJkVUUtOXEtcGFIMVhOb0theVN6TGxZSGN0TXJ1Y3lhRERSNFBEOWVTcWV1UVFxTk1VN2VGenREdkI3bmJwM2ZjQ1cwUTdWSDdrYjhsSVNRTEhDMEtCb1RoZUZPc0Ztek1oMThRUWF6RnZhS3dlZUFJcUtiRGVKYnM4am9qZTJFbC1YZmFOalNfRnNJbmpHNGpjcVhsOHYxZ0g3SllabVhYUUwxa0FhZFd2MmRKSXFVUktvTkJ0Q2NQc1JaUlFCYm92amFzSjBaZkxDd0hEekhEbjRpYkFrWFJlT0xBMDZZNTlpOEw5bkxRY2xoWm5CYkE4YkN1MlBsMzlYazZHX21wWkdQX1M2OU56REJRcEZ2MTVkTnA5M2E1WkNoeXZNMnVCOHVrSzkzeDl3VXNBV25ldGtiT1NCM3RxRElqSno4NXh3UjJIcXNmV1daeko3VFlYNmJ0QjBhSzloUVlxM2FaWW9sMHpUNllBVUt2bDVXUmpPd3JxQVhJcjlD)
          BUNDLE_ID: "io.codemagic.cmflutteryaml"
          APPLE_ID_EMAIL: Encrypted(Z0FBQUFBQmd1S0xRNDBqLVQ1UkJac29IeEVxWjZQRmNRbTQ5U1pFb2cyRlEwUHBSMGtnLWZqc3ktRE5VeHJYRnF0TmJDSjh5MDNGM3dGZnI5ZHQ3MzY3bWN2TGJ3RGVnY0pSUnJpRWY4VkZSRWMzaEl1T25nZzQ9)
          APP_SPECIFIC_PASSWORD: Encrypted(Z0FBQUFBQmd1S01mbTZWTnRqbTc0U2tDeGh1TTZkZjQybHNFeUthT3FvaUx1ZXY4eWVkbkxxV1NuaVJrU2lKT3VMY0VWLThBbnVkVEVwZ0xyVThaU0JJMUxORmxyUXVOcnA3Tm1BQzhUeEpxbVVnS1NpWS01TGM9)
          APP_STORE_APP_ID: 1571561263
        flutter: 2.2.1
        xcode: 12.5
        cocoapods: default
      scripts:
        - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: Fetch signing files
          script: |
            app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
        - name: Use system default keychain
          script: |
            keychain add-certificates
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Get Flutter packages
          script: |
            cd . && flutter packages pub get
        - name: Flutter analyze
          script: |
            cd . && flutter analyze
        - name: Flutter unit tests
          script: |
            cd . && flutter test
          ignore_failure: true          
        - name: Install pods
          script: |
            find . -name "Podfile" -execdir pod install \;
        - name: Flutter build ipa and automatic versioning
          script: |
            flutter build ipa --release \
            --build-name=1.0.0 \
            --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1)) \
            --export-options-plist=/Users/builder/export_options.plist
      artifacts:
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log
        - flutter_drive.log
      publishing:
        # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
        email:
          recipients:
            - user_1@example.com
          notify:
            success: true     # To receive a notification when a build succeeds
            failure: false    # To not receive a notification when a build fails
        slack: 
          # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
          channel: "#builds"
          notify_on_build_start: true   # To receive a notification when a build starts
          notify:
            success: true               # To receive a notification when a build succeeds
            failure: false              # To not receive a notification when a build fails
        app_store_connect:   # https://docs.codemagic.io/publishing-yaml/distribution              
          apple_id: $APPLE_ID_EMAIL   
          password: $APP_SPECIFIC_PASSWORD
    flutter-flavors-ios-dev:
      name: iOS Flutter Flavors Dev
      max_build_duration: 120
      working_directory: flutter/flutter-flavors-demo-project
      environment:
        groups:
        # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
          - ios_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
            # APP_STORE_CONNECT_ISSUER_ID <-- Put your App Store Connect Issuer Id here 
            # APP_STORE_CONNECT_KEY_IDENTIFIER <-- Put your App Store Connect Key Identifier here 
            # APP_STORE_CONNECT_PRIVATE_KEY <-- Put your App Store Connect Private Key here
          - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
        vars:
          XCODE_WORKSPACE: "ios/Runner.xcworkspace" # <-- Put your encrypted Certificate Private Key here
          # Environment variable values provided when triggering build with Codemagic API. Alternatively add the required values below.
          APP_STORE_APP_ID: 1589804869 # <-- Put the app id number here. This is found in App Store Connect > App > General > App Information
          XCODE_CONFIG: Release-dev
          XCODE_SCHEME: dev
          BUNDLE_ID: io.codemagic.flutterflavors.dev
          ENTRY_POINT: lib/main_dev.dart
        flutter: 2.0.5
        xcode: 12.5
        cocoapods: default
      triggering:
        events:
          - push
        branch_patterns:
          - pattern: 'main'
            include: true
            source: true
      scripts:
        - name: Get Flutter Packages
          script: |
            cd . && flutter packages pub get
        - name: Pod install
          script: |
            find . -name "Podfile" -execdir pod install \;
        - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: Fetch signing files
          script: |
            app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
        - name: Add certs to keychain
          script: |
            keychain add-certificates
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Flutter build ipa and automatic versioning
          script: |
            flutter build ipa --release \
            --build-name=1.0.0 \
            --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1)) \
            --export-options-plist=/Users/builder/export_options.plist \
            --flavor="$XCODE_SCHEME" \
            -t "$ENTRY_POINT"      
      artifacts: 
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log
        - flutter_drive.log
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email: 
          recipients:
            - user_1@example.com
            - user_2@example.com
          notify:
            success: true
            failure: true
        app_store_connect:
          api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
          key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
          issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
    flutter-flavors-ios-prod:
      name: iOS Flutter Flavors Prod
      max_build_duration: 120
      working_directory: flutter/flutter-flavors-demo-project
      environment:
        groups:
        # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
          - ios_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
            # APP_STORE_CONNECT_ISSUER_ID <-- Put your App Store Connect Issuer Id here 
            # APP_STORE_CONNECT_KEY_IDENTIFIER <-- Put your App Store Connect Key Identifier here 
            # APP_STORE_CONNECT_PRIVATE_KEY <-- Put your App Store Connect Private Key here
          - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
        vars:
          XCODE_WORKSPACE: "ios/Runner.xcworkspace" # <-- Put your encrypted Certificate Private Key here
          # Environment variable values provided when triggering build with Codemagic API. Alternatively add the required values below.
          APP_STORE_APP_ID: 1589804841 # <-- Put the app id number here. This is found in App Store Connect > App > General > App Information
          XCODE_CONFIG: Release-prod
          XCODE_SCHEME: prod
          BUNDLE_ID: io.codemagic.flutterflavors.prod
          ENTRY_POINT: lib/main_prod.dart
        flutter: 2.0.5
        xcode: 12.5
        cocoapods: default
      triggering:
        events:
          - push
        branch_patterns:
          - pattern: 'main'
            include: true
            source: true
      scripts:
        - name: Get Flutter Packages
          script: |
            cd . && flutter packages pub get
        - name: Pod install
          script: |
            find . -name "Podfile" -execdir pod install \;
        - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: Fetch signing files
          script: |
            app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
        - name: Add certs to keychain
          script: |
            keychain add-certificates
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Flutter build ipa and automatic versioning
          script: |
            flutter build ipa --release \
            --build-name=1.0.0 \
            --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1)) \
            --export-options-plist=/Users/builder/export_options.plist \
            --flavor="$XCODE_SCHEME" \
            -t "$ENTRY_POINT"      
      artifacts: 
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log
        - flutter_drive.log
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email: 
          recipients:
            - user_1@example.com
            - user_2@example.com
          notify:
            success: true
            failure: true
        app_store_connect:
          api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
          key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
          issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
    react-native-ios:
        name: React Native iOS
        max_build_duration: 120
        instance_type: mac_pro
        working_directory: react-native/react-native-demo-project
        environment:
            vars:
                XCODE_WORKSPACE: "ios/cmreactnative.xcworkspace"
                XCODE_SCHEME: "cmreactnative"
                APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
                APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
                APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)         
                CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd3TUNPMlNBbWFwU0FaWm8zSDB6MjNSTVNmM2NUSkJIcjdOOXdtVXphb3c2Y2ttQk9teGtKTlEzZ3pwSzNQQkUyM2pfWVlLcnhIRlpYaDZhQmVvYXJQZnJQeFlMODNjU0ptcE5OekFOTXpoLXN0UG5PNG4wQ0VVT0ZHRE5CbWhja2R0b2R0S0QtVlNLV0lQaVdHUlAzOVlxbHVtekliQ2htNThkaWllQ2E5SkdRS3pQMkljamstZ3VDeVp2RlVaNUJYcjdhQzFVZ2t4dHJucXdHMXdoV1Q1RzRxLUlpY29oZ0Y1dExvLUFJUmxFQUVqdFE3dVNoYmVSUVZMUVN0Q3U3TnZoMWdrT0hRUFJYWklOVm5WUm9yekkyZ2QyOTdwZ1Y5U0VrZUh1TjJ2U3FSb1dfZVFOTzdoVUN1ZllzdHNkWXNSOFd1Q09lQ01NVnkwQ2E5UGRUdG1LbE9OREt4YXhSR1JqODFNSXFJUWxMd1Nhak52RmJyeTlQRHZaMGhHU29NdExJVlR2dXMwZ1pac2did1NNNjVTbEVXckpPUHYtcFd3VE1oZWI1SkdpNEFoLUtLYkhOMUxqRVZHLVRFZ0lweS1aUkduMWdUbnVqR1dTTVgzQzRsUGpzZGY0QXYzemJ2TUNqalNpamFCS3FDWkpQSkx6Nlh6U3FmODZlX1phMjItcFZ1c1U3czJ3Yy1VUWRMQWYwaUN5ZkZxRUxVTUNQeVpabUFrY2JyV0lnVm55Y1pCNzBUYlZJS0JvSlJCUGNhaEV2ZHZUNGJpVm1Bam9rT29QX2htaWVuTF9tZW9JMEYxd3dKckZ0MngtS0RCQ09hVE92T25ZNUd2czhYMGk5STBBbzZuM1dsSllGeUkzZXcyck81eGR0VjN2NGlnTFJsa1VVbWM0enlaYVlQYnk1VjRTeUgwY1JOMmRYcXppMG5xbnNITThDTkNjMy11cGJpdEVOX0R5ODRjQTFWbVhtUHZFdFllYTlLYVFub0xzdDRUNlZVdnhUUWZDeU11cGQ5TC02bnd4bXlaUWh5OU80N3UtazJZUHR4TTNDbUxHWDFyMXJ0YVhGc1diVzBlajNaaTI1RDRkcmtBRXBPRFpWSFpJODdsWWFhd1pOODJHSG9vam51RXhEOWZxcDNfZ21jU2pSTEFNeV9VaURZVDA3NWFtTDBwZzVCQ1VkcHY4a1kwbmdMank2NFVzZC14UGllckJoU3pnRWwycWl0WEE1WnJBMElwTXlGRVJNcE5VTDVFZlZUeUg2SGFUTURMdUVwdlFnY2pTNU1BbldTbVN6N1R3NEVBdXlXbDhpUWcyYXRfVkJwaFBKU0pOZS1jWVdDbnVUZ2g4SFR4MTNyU3k0QklvSFFsbkZOUHBucTRYalZSMXU4Q0VvOHFGcFctRHdNd1cybzZnVWxwTzJUWTVubER3UktRYlpacm5BMEF0OUJ3TF9nS0xFSUhvdTBOYXU0dEdaRFhJaXpGakdBaVBBYWx4VDZSMnNaNlBRWTdNQmxnN1puYXlneWxhNGE3ZFpzdi1IY3RFRTZYZDhJNm15UnE3Y2d3N1duNGxtRjVHVjk1Q2xZeUdLYWFsMDRkOHIybDNIVllMd01qWjVZc2lFbEtnMVJaMFB2TTRrQl9Ubzc2clFXMm94Tmk2djFmb3ZoaG5icUU4QTU5VWhTVjViVHNoX09GNkVDMjJVeHJiYUQ3bk1QU1VVdEM3c2JTTWh5QmhVMktrU041OTRtR0hpeU0tOWlvc0xibnI0Y3lhUWxGQ3YtUUtXZFdTWWFEeHlNMzJaNy1aUVI4Nm02ZE1Pd0lfUmpMYlhXZ2NvRWhVaGhIb3dqV2J1TVlXQUkxaWNidUhZQzdKenJDV3ExcElJSmlEUWpma2w2ellsZjI3SW5vbzRBZmdxSjVPdHBQTlIzcVl6Y3hpcDF0eEpFa1lTSmxFSlJ4SU9QSzNDMXJJOS1QVXVOR1paNnlHN3gxY0tuMHZXV1p5UHE4NEhRX0k2MVBKOGhyQWF0WFNNTUszUkVTaW5LckhkQW1qa05NdU1YTEpqb3ZZbE5zdHlGcHJYTkM3UVNPdnBmWmhYdUppUW13U0RiN1J1LWtPNm0xM2FUYV9aNzVtRElJMlNzWC1KSjNqUXFNbkJJVG8yOENKQnJSeWdud0dMcjJDQVJLcVBTaTVueWdUNHd1REJLUzRXX0JBLU9uc0lxR25DTF9jR0xQTHY5VXFUMjUyRmM3Ui1XYVphZWQtaHFqSFJZTW1UWFBYaWVXdDlPb0k4ODhDVTd1UjJnekoyN2VsR0FLODVIODNQOENWTGRIRkFfb2tfa3ZZd251eTR5aWVTeFlRYVNFNmdhVnJMM0N2eGdDalgwM0NmYzBndTFMRlYxYWViTjRZZXc2a1dpN1VvbndMZmh2YkdFZkpQYkhQQ3FEQTI0a0VEYkZtQVlNVTlmbVRPZm1lTGtyRURzZjJudWZjaWJBSnZwdFM0Qnd0R1U5Uk9mLWVBbVlGMTktQW9BaGMzd1JPVVFCMUp6VWRQSzVrai1oNFo3akxnRXJJWm1FNUYwWEQ3SXl0aFJkVUUtOXEtcGFIMVhOb0theVN6TGxZSGN0TXJ1Y3lhRERSNFBEOWVTcWV1UVFxTk1VN2VGenREdkI3bmJwM2ZjQ1cwUTdWSDdrYjhsSVNRTEhDMEtCb1RoZUZPc0Ztek1oMThRUWF6RnZhS3dlZUFJcUtiRGVKYnM4am9qZTJFbC1YZmFOalNfRnNJbmpHNGpjcVhsOHYxZ0g3SllabVhYUUwxa0FhZFd2MmRKSXFVUktvTkJ0Q2NQc1JaUlFCYm92amFzSjBaZkxDd0hEekhEbjRpYkFrWFJlT0xBMDZZNTlpOEw5bkxRY2xoWm5CYkE4YkN1MlBsMzlYazZHX21wWkdQX1M2OU56REJRcEZ2MTVkTnA5M2E1WkNoeXZNMnVCOHVrSzkzeDl3VXNBV25ldGtiT1NCM3RxRElqSno4NXh3UjJIcXNmV1daeko3VFlYNmJ0QjBhSzloUVlxM2FaWW9sMHpUNllBVUt2bDVXUmpPd3JxQVhJcjlD)
                BUNDLE_ID: "io.codemagic.cmreactnative"
                APPLE_ID_EMAIL: Encrypted(Z0FBQUFBQmd1S0xRNDBqLVQ1UkJac29IeEVxWjZQRmNRbTQ5U1pFb2cyRlEwUHBSMGtnLWZqc3ktRE5VeHJYRnF0TmJDSjh5MDNGM3dGZnI5ZHQ3MzY3bWN2TGJ3RGVnY0pSUnJpRWY4VkZSRWMzaEl1T25nZzQ9)
                APP_SPECIFIC_PASSWORD: Encrypted(Z0FBQUFBQmd1S01mbTZWTnRqbTc0U2tDeGh1TTZkZjQybHNFeUthT3FvaUx1ZXY4eWVkbkxxV1NuaVJrU2lKT3VMY0VWLThBbnVkVEVwZ0xyVThaU0JJMUxORmxyUXVOcnA3Tm1BQzhUeEpxbVVnS1NpWS01TGM9)
                APP_STORE_APP_ID: 1571903173
            node: 16.11.1
            xcode: 12.5
            cocoapods: default
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install dependencies
              script: |
                yarn install
            - name: Install CocoaPods dependencies
              script: |
                cd ios && pod install
            - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
              script: |
                keychain initialize
            - name: Fetch signing files
              script: |
                app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
            - name: Use system default keychain
              script: |
                keychain add-certificates
            - name: Increment build number
              script: |
                set -ex
                cd ios && agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
            - name: Set up code signing settings on Xcode project
              script: |
                xcode-project use-profiles --warn-only
            - name: Build ipa for distribution
              script: |
                xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" 
        artifacts:
            - build/ios/ipa/*.ipa
            - /tmp/xcodebuild_logs/*.log
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        publishing:
          # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
          email:
            recipients:
              - user_1@example.com
              - user_2@example.com
            notify:
              success: true     # To not receive a notification when a build succeeds
              failure: false    # To not receive a notification when a build fails
          slack: 
            # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
            channel: '#builds'
            notify_on_build_start: true   # To receive a notification when a build starts
            notify:
              success: true               # To not receive a notification when a build succeeds
              failure: false              # To not receive a notification when a build fails
          app_store_connect:                 
              apple_id: $APPLE_ID_EMAIL
              password: $APP_SPECIFIC_PASSWORD
                        
